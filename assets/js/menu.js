"use strict";
/*
  Version 20211007-1245
*/

/* 
Please edit bootstrap classes for cards and card modals in menu_bs.js.
Editing below should only be to modify which items actually display
USER_EDIT <-- Search on this string to find editable sections
Please do not edit this file other than USER_EDIT marked locations.
Backup file before editing.
This file must be loaded in the page that will be displaying menu items,
dishes.js must also be loaded ahead of this file as well as menu_bs.js,
and said page must have an EMPTY element with id="menu_data"
*/

// Global
let dataTarget = "#menu_data";
let bgId = "#bg-div";

// Run startup to init db
$(() => { startUp(); })

// Write seed ratings from to localStorage if not already present,
// otherwise, read values from localStorage into dishes
// and load other 'modules'
function startUp() {
  // $("body").append(`<script type="text/javascript" src="./assets/js/menu_bs.js"></script>`)
  // $("body").append(`<script type="text/javascript" src="./assets/js/menu_dishes.js"></script>`)
  let obj = getMenu("all", false);
  if (localStorage.getItem("rating7759") == undefined) {
    updateLocalStorage();
  } else readRatings();
  return obj;
}

// keeps ratings in localStorage current
function updateLocalStorage() {
  let obj = dishes;
  let a = [], b = [];
  for (let i in obj) {
    a.push(parseFloat(obj[i].rating));
    b.push(parseInt(obj[i].numRatings));
  }
  localStorage.rating7759 = JSON.stringify(a);
  localStorage.numRatings7759 = JSON.stringify(b);
}

// read ratings from localStorage
function readRatings() {
  let a = JSON.parse(localStorage.getItem("rating7759"));
  let b = JSON.parse(localStorage.getItem("numRatings7759"));
  if (a.length !== dishes.length) {           // clear local storage if array lengths don't match (item probably added or emoved from dishes.js)
    localStorage.removeItem("rating7759");
    localStorage.removeItem("numRatings7759");
    updateLocalStorage();
  } else {
    for (let i in dishes) {
      dishes[i].rating = parseFloat(a[i]);
      dishes[i].numRatings = parseInt(b[i]);
    }
  }
}

// allow user to rate dish
function rateDish(id, rating) {
  rating = parseInt(rating);
  dishes[id].rating = ((dishes[id].rating * dishes[id].numRatings + rating) / (dishes[id].numRatings + 1));
  dishes[id].numRatings++;
  updateLocalStorage();
  $(`#select_${id}`).replaceWith(`<div>${rating} stars. Thank you!</div>`);
  $(`#modalBtn_${id}`).replaceWith("<div></div>");
  $(`#menu-rat-stars_${id}`).replaceWith(makeStars(Math.round(dishes[id].rating)));
  $(`#card-rating-stars_${id}`).replaceWith(makeStars(Math.round(dishes[id].rating)));
  $(`#menu-rat_${id}`).replaceWith(dishes[id].numRatings);
}

function makeStars(num) {
  let ratingStars = '';
  for (let j = 0; j < Math.round(num); j++) {
    ratingStars += "&#x272f;"; // display stars
  }
  return ratingStars;
}

function setMealTypeOnBodyClass(meal) {
  let elId = `${bgId}`;
  $(elId).removeClass("bg-breakfast");
  $(elId).removeClass("bg-lunch");
  $(elId).removeClass("bg-dinner");
  $(elId).removeClass("bg-all");
  $(elId).addClass(`bg-${meal}`);
}
// handles display of selected items
// currently supports parameters of breakfast|lunch|dinner|all
// 2nd parm defaults to true (clears data div before update)
// false option is currently utilized internally within this script
function getMenu(meal, clrDiv = true) {

  if (clrDiv === false) return dishes;

  $(`${dataTarget}`).empty(); // makes sure data div is empty before we append to it

  $("[id^=menu_link").removeClass("active"); // clear active link
  $(`[id^=menu_link_${meal}`).addClass("active"); // and set active link

  setMealTypeOnBodyClass(meal);
  let selectedMeal = [];
  // gets all dishes or selected meal and returns sorted by price
  if (meal === "all") {
    selectedMeal = [...dishes]
    selectedMeal = selectedMeal.sort((a, b) => a.price - b.price);
  } else selectedMeal = dishes.filter((item) => item.meal == meal).sort((a, b) => a.price - b.price);

  // loop over items selected from dishes object and populate cards and modals
  for (let i in selectedMeal) {
    let ratingStars = '', cardContent = '', modalContent = '';
    const MAX_SHORT_DESC_LENGTH = 40; //len of short description for card display, full desc in modal)
    let shortMenuDescription = selectedMeal[i].description.slice(0, MAX_SHORT_DESC_LENGTH) + "...";
    ratingStars = makeStars(selectedMeal[i].rating);

    // EDIT CARD DISPLAY ITEMS and descriptions BELOW USER_EDIT // Comment out items not wanted for display
    cardContent += `<div id="card_${selectedMeal[i].id}" class="menu_card ${menu_card_classes}">`;
    cardContent += `<h6 class="menu_title ${menu_title_classes}">${selectedMeal[i].title}</h6>`;
    cardContent += `<img class="menu_img_card ${menu_img_card_classes}" src=${selectedMeal[i].imgUrl} alt='${shortMenuDescription}' /> <br />`;
    // cardContent += `<p class="menu_description ${menu_description_classes}">${selectedMeal[i].description}</p> <br />`;
    cardContent += `<p class="menu_description ${menu_description_classes}">${shortMenuDescription}</p> <br />`;
    cardContent += `<p class="menu_calories ${menu_calories_classes}">Calories: ${selectedMeal[i].calories}</p>`;
    // cardContent += `<p class="menu_price ${menu_price_classes}">Price: \$${selectedMeal[i].price}</p>`;
    cardContent += `<p id="card-rating_${selectedMeal[i].id}" class="menu_rating ${menu_rating_classes}"><span id="card-rating-stars_${selectedMeal[i].id}">${ratingStars}</span></p>`;
    // cardContent += `<p class="menu_rating_count ${menu_rating_count_classes}">By ${selectedMeal[i].numRatings} people.</p>`;
    cardContent += ` <!-- Review Modal -->`;
    cardContent += `<button type="button" class="${modal_open_btn_classes}" data-toggle="modal" data-target="#modal_${selectedMeal[i].id}" onclick="$('.menu_card').removeClass('menu_card_hover')">More Info</button>`;

    // EDIT CARD DISPLAY ITEMS and descriptions ABOVE

    // EDIT MODAL DISPLAY ITEMS and descriptions BELOW
    // had to use addClass/removeClass to solve problems with  using hover selector on card with modal dialog
    modalContent += `<!-- Review Modal -->`;
    modalContent += `<div id="modal_${selectedMeal[i].id}" class="modal ${modal_menu_card_classes}" role="dialog">`;
    modalContent += `<div class="modal-dialog modal-med">`;
    // modalContent += `<div class="modal-dialog modal-med style="lineheight">`;
    modalContent += `<!-- Review Modal content-->`;
    modalContent += `<div class="modal-content">`;
    modalContent += `<div class="modal-header ${modal_header_classes}">`
    // Edit Modal Title classes  USER_EDIT
    // Must keep the menu_* classes and the ${selectedMeal[i].*} items in order for data to be dynamically populated
    modalContent += `<h5 class="menu_title ${modal_menu_title_classes}">${selectedMeal[i].title}</h5>`;
    modalContent += `<button type="button" class="menu_modal_button ${modal_close_btn_classes}" data-dismiss="modal"
                    onclick="$('.menu_card').addClass('menu_card_hover')">Close</button>`;
    modalContent += `</div>`;
    modalContent += `<div class="modal-body">`;
    // EDIT CARD CONTENT BELOW USER_EDIT
    modalContent += `<img class="menu_img_card ${modal_menu_img_card_classes}" src=${selectedMeal[i].imgUrl} alt='${selectedMeal[i].description}' />`;
    modalContent += `<p class="menu_description ${modal_menu_description_classes}">${selectedMeal[i].description}</p>`;
    modalContent += `<p class="menu_pairing ${modal_menu_pairing_classes}">Pairs well with an ice cold ${selectedMeal[i].pairing}</p>`;
    modalContent += `<p class="menu_calories ${modal_menu_calories_classes}">Calories: ${selectedMeal[i].calories}</p>`;
    if (selectedMeal[i].allergies != '') modalContent += `<p class="menu_allergies ${modal_menu_allergies_classes}">Allergies: ${selectedMeal[i].allergies}</p>`;
    modalContent += `<p class="menu_price ${modal_menu_price_classes}">Price: \$${selectedMeal[i].price}</p>`;
    // EDIT CARD CONTENT ABOVE
    // Rating Selector
    modalContent += `<form action="" class="text-right">`;
    modalContent += `Your rating: `;
    modalContent += `<select id="select_${selectedMeal[i].id}" name="stars">`;
    modalContent += `<option value="1">1</option>`;
    modalContent += `<option value="2">2</option>`;
    modalContent += `<option value="3" selected>3</option>`;
    modalContent += `<option value="4">4</option>`;
    modalContent += `<option value="5">5</option>`;
    modalContent += `</select>`;
  

    modalContent += `<button id="modalBtn_${selectedMeal[i].id}" type="button" class="${modal_btn_rate_dish_classes}" 
                    onclick="rateDish(${selectedMeal[i].id}, document.getElementById('select_${selectedMeal[i].id}').value)">Rate it</button>`;
    modalContent += `</form>`;
    modalContent += `</div>`;
    // Modal footer content
    modalContent += `<div class="modal-footer ${modal_footer_classes}">`;
    modalContent += `<p class="menu_rating ${modal_menu_rating_classes}"><span id="menu-rat-stars_${selectedMeal[i].id}">${ratingStars}</span>`;
    modalContent += `<span class="menu_rating_count ${modal_menu_rating_count_classes}"> by <span id="menu-rat_${selectedMeal[i].id}">
                    ${selectedMeal[i].numRatings}</span> diners</span>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `<!-- END Review Modal -->`;
    modalContent += `</div>`;
    // EDIT MODAL DISPLAY ITEMS and descriptions BELOW

    $(`${dataTarget}`).append(cardContent + modalContent);
  }
  return selectedMeal
}

function displayRatingsConsole() {
  let dishRatings = []
  for (let i in dishes) {
    dishRatings.push(dishes[i].rating);
  }
    console.log(dishRatings);
    console.log(JSON.parse(localStorage.rating7759));
}

function getDailySpecial() {
  // We will randomly pick a meal to display as a daily special.
  //id: daily_special, class: daily_special
  let arr = [...dishes];
  let special = shuffle(arr).pop();
  let newHTML = '';
  special.price = Number((Math.round(special.price*0.8)- 0.01)).toFixed(2);
  newHTML += `
    <h4 class="text-ssBrand">Daily Special</h4>
    <img class="daily_special" src="${special.imgUrl}" alt="${special.title}">
    <div class="mt-3"> 
      <p>Our world famous <em class="text-ssBrand">${special.title}</em> will delight your palate and leave you satiated!</p>
      <p>Perfect paired with an ice cold ${special.pairing}</p>
      <p>Only \$${special.price} today!</p>
      <em>See our menu page under ${special.meal} for more info.</em>
    </div>
    `
  $("#daily_special").html(newHTML);
}

// helper function used currently in randomly selecting a daily special for the front page.
function shuffle(arr) {
  for (let k = 0; k < ((arr.length - 1) * 3); k++) {
    arr = arr.sort(() => 0.5 - Math.random());
  }
  return arr;
}