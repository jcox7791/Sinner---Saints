"use strict";
/*
  Version 20211007-1245
*/

//GLOBAL
const MAX_REVIEW_LENGTH = 500; // default = 500;
let dataTarget = "#review_data";
let bgId = "#bg-div";

// Run startup to init db
$(() => { startUp(); })


function prettyDate(msTimestamp) {
  let opts = { weekday: "short", month: "short", year: "numeric", day: "numeric" };
  let d = new Date(msTimestamp);
  return Intl.DateTimeFormat("en-us", opts).format(d);
}

/* 
Please edit bootstrap classes for cards and card modals in review_bs.js.
Editing below should only be to modify which items actually display
USER_EDIT <-- Search on this string to find editable sections
Please do not edit this file other than USER_EDIT marked locations.
Backup file before editing.
This file must be loaded in the page that will be displaying menu items,
reviewsDb.js must also be loaded ahead of this file as well as review_bs.js,
and said page must have an EMPTY element with id="review_data"
*/


// Write seed ratings from to localStorage if not already present,
// otherwise, read values from localStorage into reviewsDb
// and load other 'modules'
function startUp() {
  $(".review_form_btn").addClass(`${modal_btn_rate_dish_classes}`);
  $("#bg-div").addClass("bg-reviews");
  if (localStorage.getItem("reviews7759") === null) {
    updateLocalStorageReviews();
  } else {
    readReviews();
  }
  getReviews('all');

  // give the username input field focus on modal review form load...
  $(() => {
    $('#reviewModal').on('shown.bs.modal', function () {
      $('#review_username').trigger('focus');
    });
  });
  // $(".review_text").css("word-wrap","break-word");
}

// keeps reviews in localStorage current
function updateLocalStorageReviews() {
  localStorage.reviews7759 = JSON.stringify(reviewsDb);
}

// read reviews from localStorage
function readReviews() {
  reviewsDb = JSON.parse(localStorage.getItem("reviews7759"));
}

// handles display of selected items
// 2nd parm defaults to true (clears data div before update)
// false option is currently utilized internally within this script
function getReviews(reviewSelect, clrDiv = true) {

  if (clrDiv === false) return reviewsDb;

  $(`${dataTarget}`).empty(); // makes sure data div is empty before we append to it
  let selectedReview = [], a, b;
  // gets all reviewsDb or selected review and returns sorted by date
  if (reviewSelect === "all") {
    selectedReview = [...reviewsDb];
    selectedReview = selectedReview.sort((a, b) => b.date - a.date);
  } else selectedReview = reviewsDb.filter((item) => item.reviewSelect == reviewSelect).sort((a, b) => b.date - a.date);

  // loop over items selected from reviewsDb object and populate cards and modals
  for (let i in selectedReview) {
    let cardContent = '', modalContent = '';
    const MAX_SHORT_DESC_LENGTH = 100; // len of short description for card display, full desc in modal)
    const MAX_USERNAME_LENGTH = 50; // Limit length of username displayed to prevent spamming display)
    let shortReview = selectedReview[i].review.slice(0, MAX_SHORT_DESC_LENGTH) + "...";
    let limitLenUsername = selectedReview[i].username.slice(0, MAX_USERNAME_LENGTH);
    if (limitLenUsername < selectedReview[i].username) limitLenUsername += "...";

    // EDIT CARD DISPLAY ITEMS and descriptions BELOW USER_EDIT // Comment out items not wanted for display
    cardContent += `<div id="card_${selectedReview[i].id}" class="review_card ${review_card_classes}">`;
    cardContent += `<h5 class="review_username ${review_username_classes}">${limitLenUsername}</h5>`;
    cardContent += `<img class="review_img_card ${review_img_card_classes}" src=${selectedReview[i].avatarUrl} alt="${limitLenUsername}"/> <br />`;
    // cardContent += `<p class="review_text ${review_text_classes}">${selectedReview[i].review}</p> <br />`;
    cardContent += `<p class="review_text ${review_text_classes}">${shortReview}</p> <br />`;
    cardContent += `<div class="${review_card_footer_classes} ">`
    cardContent += `<p class="review_date ${review_date_classes}">Posted ${prettyDate(selectedReview[i].date)}</p>`;
    cardContent += ` <!-- Review Modal -->`;
    cardContent += `<button type="button" class="${modal_open_btn_classes}" data-toggle="modal" data-target="#modal_${selectedReview[i].id}" onclick="$('.review_card').removeClass('review_card_hover')">More Info</button>`;
    cardContent += `</div>`
    // EDIT CARD DISPLAY ITEMS and descriptions ABOVE

    // EDIT MODAL DISPLAY ITEMS and descriptions BELOW
    // had to use addClass/removeClass to solve problems with  using hover selector on card with modal dialog
    modalContent += `<!-- Review Modal -->`;
    modalContent += `<div id="modal_${selectedReview[i].id}" class="modal ${modal_review_card_classes}" role="dialog">`;
    modalContent += `<div class="modal-dialog modal-med">`;
    modalContent += `<!-- Review Modal content-->`;
    modalContent += `<div class="modal-content">`;
    modalContent += `<div class="modal-header ${modal_header_classes}">`
    // Edit Modal Title classes  USER_EDIT
    // Must keep the review_* classes and the ${selectedReview[i].*} items in order for data to be dynamically populated
    modalContent += `<h6 class="review_username ${modal_review_username_classes}">${limitLenUsername}</h6>`;
    modalContent += `<button type="button" class="review_modal_button ${modal_close_btn_classes}" data-dismiss="modal"
                    onclick="$('.review_card').addClass('review_card_hover')">Close</button>`;
    modalContent += `</div>`;
    modalContent += `<div class="modal-body">`;
    // EDIT CARD CONTENT BELOW USER_EDIT
    modalContent += `<img class="review_img_modal ${modal_review_img_card_classes}" src=${selectedReview[i].avatarUrl} alt="${limitLenUsername}" />`;
    modalContent += `<p class="review_text ${modal_review_text_classes}">${selectedReview[i].review}</p>`;

    // EDIT CARD CONTENT ABOVE
    modalContent += `</div>`;
    // Modal footer content
    modalContent += `<div class="modal-footer ${modal_footer_classes}">`;
    modalContent += `<p class="review_date ${modal_review_date_classes}">Posted ${prettyDate(selectedReview[i].date)}</p>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `</div>`;
    modalContent += `<!-- END Review Modal -->`;
    modalContent += `</div>`;
    // EDIT MODAL DISPLAY ITEMS and descriptions BELOW

    $(`${dataTarget}`).append(cardContent + modalContent);
  }
  return selectedReview;
}

function addReview(username, reviewText) {
  reviewText = reviewText.trim();
  username = username.trim();

  if ((username === null || username === undefined) ||
    (reviewText === null || reviewText === undefined) ||
    (reviewText.length < 1) || (username.length < 1)) {
    alert("Please fill out all fields. Thank you!");
    // document.getElementById("review_char-left").text = "Please fill out all fields.";
    return;
  }

  let idsTaken = reviewsDb.map((x) => x.id).sort((a, b) => a - b); // This line and next get used ids and returns next avail.
  let id = idsTaken[idsTaken.length - 1] + 1;
  const numReviewsInDefaultDb = 6; // Each item should have a unique image
  if (reviewsDb.length < numReviewsInDefaultDb) numReviewsInDefaultDb = reviewsDb.length; //sanity check
  let avatarUrl = reviewsDb[Math.round(Math.random() * numReviewsInDefaultDb)].avatarUrl; //assign random image since we cannot store files w/o web server
  let dateVal = Date.now();

  let andSoOn = ''; // ellipses ... if needed
  if (reviewText.length > MAX_REVIEW_LENGTH) andSoOn = "...";

  reviewText = reviewText.slice(0, MAX_REVIEW_LENGTH) + andSoOn; // Kludge... should count input chars and warn user
  reviewText = sanitizeText(reviewText);

  reviewsDb.push({ id: id, username: username, avatarUrl: avatarUrl, date: dateVal, review: reviewText });
  updateLocalStorageReviews(); // this clearly does no sanity checking for multiple accesses...
  getReviews('all'); //refresh display
  resetReviewModal();
}

function sanitizeText(text) {
  // possible future use if determined need to escape/remove certain characters from input.
  return text;
}

function counter(targetId, warnId) {
  let str = document.getElementById(targetId).value;

  counter.charLeft = MAX_REVIEW_LENGTH - str.length; // set warning text color
  if (counter.charLeft < 25) $(`#${warnId}`).removeClass().addClass("text-danger");
  else if (counter.charLeft < 50) $(`#${warnId}`).removeClass().addClass("text-warning");
  else $(`#${warnId}`).removeClass().addClass("text-light");

  if (counter.charLeft < 1) document.getElementById(targetId).value = document.getElementById(targetId).value.slice(0, MAX_REVIEW_LENGTH - 1);
  if (counter.charLeft < 1) counter.charLeft = 0;

  document.getElementById(`${warnId}`).innerText = `${counter.charLeft} characters remaining...`;
}

function resetReviewModal() {
  document.getElementById('review_username').value = null;
  document.getElementById('review_textarea').value = null;
  document.getElementById('review_char-left').innerText = null;
}
